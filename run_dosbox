#!/usr/bin/env python3

# pylint: disable=missing-docstring
# pylint: disable=fixme

import argparse
import os
import re
import subprocess
import sys

import confgen

# FIXME tweaks for following titles:
#
# Tomb Raider I (224960)
# Does not work. Uses DOSBox with additional patches.
#
# All of these come with slightly different commands and .conf files:
#
# Ultimate Doom https://steamdb.info/app/2280/config/
# Final DOOM (https://steamdb.info/app/2290/config/)
# Master Levels for DOOM II (https://steamdb.info/app/9160/config/)

TWEAKS_DB = {

    # DOOM II: Hell on Earth
    '2300': {
        'commands': {
            r'.*doom2 \+ mouse.bat$':  {
                'cmds': ['mount C base', 'C:', 'DOOM2.EXE -config MOUSE.CFG'],
            },
            r'.*doom2.bat$': {
                'args': ['base/DOOM2.EXE', '-fullscreen', '-exit'],
            },
        },
    },
    # MegaRace 2
    # - has faulty launch command in Steam database
    '733760': {
        'commands': {
            r'.*':  {
                'args': ['-c', 'mount D . -t cdrom', 'MEGARACE.EXE',
                         '-fullscreen', '-exit'],
            },
        },
    },
}


STEAM_APP_ID = os.environ.get('SteamAppId')

PID_FILE = f'/tmp/steam_dos_{STEAM_APP_ID}'


def wait_for_previous_process():
    if not STEAM_APP_ID:
        return
    pid = 0
    try:
        with open(PID_FILE, 'r') as pid_file:
            pid = int(pid_file.read())
    except FileNotFoundError:
        pass
    if pid and os.path.isfile(f'/proc/{pid}/cmdline'):
        print(f'run_dosbox: waiting for process {pid} to stop',
              f'and delete file {PID_FILE}', file=sys.stderr)
        subprocess.call(['inotifywait', '-e', 'delete', PID_FILE])


# FIXME rewrite this as __enter__, __exit__ to be used in 'with' statement
def create_pid_file():
    if not STEAM_APP_ID:
        return
    with open(PID_FILE, 'w') as pid_file:
        pid_file.write(str(os.getpid()))


def cleanup_pid_file():
    if not STEAM_APP_ID:
        return
    try:
        os.remove(PID_FILE)
    except FileNotFoundError:
        pass


def autoexec(cmds):
    args = ['-fullscreen']
    for cmd in cmds:
        args.extend(['-c', cmd])
    args.extend(['-c', 'exit'])
    return args


def tweak_command(cmd_line):
    orig_cmd = ' '.join(cmd_line)
    exec_replacements = TWEAKS_DB[STEAM_APP_ID]['commands']
    for expr, replacement in exec_replacements.items():
        exe_pattern = re.compile(expr)
        if exe_pattern.match(orig_cmd):
            if 'args' in replacement:
                return replacement['args']
            if 'cmds' in replacement:
                return autoexec(replacement['cmds'])
            raise KeyError
    print('run_dosbox: warning: no suitable command tweak found',
          file=sys.stderr)
    return []


def get_steam_dos_conf(args):
    name = confgen.uniq_conf_name(STEAM_APP_ID, args)
    if not os.path.isfile(name):
        print(f'run_dosbox: generating {name} based on {args}',
              file=sys.stderr)
        confgen.create_conf_file(name, args)
    return name


def run_dosbox(args):
    create_pid_file()
    print('run_dosbox:', ['dosbox'] + args, file=sys.stderr)
    subprocess.call(['dosbox'] + args)
    cleanup_pid_file()


def run(cmd_line, wait=False):

    if wait:
        wait_for_previous_process()

    _folder, exe = os.path.split(cmd_line[0]) if cmd_line else (None, '')

    if exe == 'iscriptevaluator.exe':
        print('run_dosbox: skipping Steam script:', cmd_line, file=sys.stderr)

    elif STEAM_APP_ID in TWEAKS_DB:
        # TODO adapt to new style of creating a .conf file
        print(f'run_dosbox: tweaking command for app {STEAM_APP_ID}: ',
              file=sys.stderr)
        run_dosbox(tweak_command(cmd_line))

    elif STEAM_APP_ID and exe.lower() == 'dosbox.exe':
        # When dosbox with parameters is called, use them to
        # generate new .conf file.  When dosbox without parameters
        # is called, it implies: -conf dosbox.conf
        dosbox_args = cmd_line[1:] or ['-conf', 'dosbox.conf']
        name = get_steam_dos_conf(dosbox_args)
        run_dosbox(['-conf', name])

    elif STEAM_APP_ID and os.path.isfile('dosbox.conf'):
        # Executable is unrecognized, but at least there's a dosbox.conf
        # let's pretend it was passed to dropbox.exe:
        name = get_steam_dos_conf(['-conf', 'dosbox.conf'])
        run_dosbox(['-conf', name])

    else:
        print('run_dosbox: ignoring command:', cmd_line, file=sys.stderr)


def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--get-native-path', action='store_true')
    group.add_argument('--get-compat-path', action='store_true')
    group.add_argument('--wait-before-run', action='store_true')
    group.add_argument('--get-current-step')
    args, run_cmd_line = parser.parse_known_args()

    if args.get_native_path:
        # FIXME convert single path: windows -> linux
        sys.exit(1)
    elif args.get_compat_path:
        # FIXME convert single path: linux -> windows
        sys.exit(1)
    elif args.get_current_step:
        # Steam sometimes ivokes this even when it's not defined in
        # toolmanifestâ€¦
        sys.exit(1)
    else:
        run(run_cmd_line, wait=args.wait_before_run)


if __name__ == "__main__":
    main()
