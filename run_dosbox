#!/usr/bin/env python3

# pylint: disable=missing-docstring
# pylint: disable=fixme

import argparse
import subprocess
import sys
import os

# FIXME tweaks for following titles:
#
# STAR WARS™ - Dark Forces (32400)
# Works after manual fix.
# File is named Dosbox.conf and mount path in file is wrong
#
# Tomb Raider I (224960)
# Does not work. Uses DOSBox with additional patches.

TWEAKS_DB = {
    # MegaRace 2
    # Has faulty launch command in Steam database.
    '733760': {
        'args': ['-c', 'mount D . -t cdrom', 'MEGARACE.EXE',
                 '-fullscreen', '-exit'],
    },
}

STEAM_APP_ID = os.environ.get('SteamAppId')

PID_FILE = f'/tmp/steam_dos_{STEAM_APP_ID}'


def wait_for_previous_process():
    if not STEAM_APP_ID:
        return
    pid = 0
    try:
        with open(PID_FILE, 'r') as pid_file:
            pid = int(pid_file.read())
    except FileNotFoundError:
        pass
    if pid and os.path.isfile(f'/proc/{pid}/cmdline'):
        print(f'run_dosbox: waiting for process {pid} to stop',
              f'and delete file {PID_FILE}', file=sys.stderr)
        subprocess.call(['inotifywait', '-e', 'delete', PID_FILE])


# FIXME rewrite this as __enter__, __exit__ to be used in 'with' statement
def create_pid_file():
    if not STEAM_APP_ID:
        return
    with open(PID_FILE, 'w') as pid_file:
        pid_file.write(str(os.getpid()))


def cleanup_pid_file():
    if not STEAM_APP_ID:
        return
    try:
        os.remove(PID_FILE)
    except FileNotFoundError:
        pass


def run_dosbox(args):
    create_pid_file()
    print(['dosbox'] + args)
    subprocess.call(['dosbox'] + args)
    cleanup_pid_file()


def run(cmd_line, wait=False):

    if wait:
        wait_for_previous_process()

    _folder, exe = os.path.split(cmd_line[0]) if cmd_line else (None, '')

    if exe == 'iscriptevaluator.exe':
        print('run_dosbox: skipping Steam script:', cmd_line, file=sys.stderr)
    if STEAM_APP_ID in TWEAKS_DB:
        print(f'run_dosbox: tweaking command for app {STEAM_APP_ID}: ',
              file=sys.stderr)
        run_dosbox(TWEAKS_DB[STEAM_APP_ID]['args'])
    elif exe.lower() == 'dosbox.exe' or os.path.isfile('dosbox.conf'):
        # Normal use-case is dosbox.conf file in top-level game dir
        # with autoexec section inside.
        run_dosbox([])
    else:
        print('run_dosbox: ignoring command:', cmd_line, file=sys.stderr)


def main():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--get-native-path', action='store_true')
    group.add_argument('--get-compat-path', action='store_true')
    group.add_argument('--wait-before-run', action='store_true')
    group.add_argument('--get-current-step')
    parser.add_argument('commands', nargs='*')
    args = parser.parse_intermixed_args()

    if args.get_native_path:
        # FIXME convert single path: windows -> linux
        sys.exit(1)
    elif args.get_compat_path:
        # FIXME convert single path: linux -> windows
        sys.exit(1)
    elif args.get_current_step:
        # Steam sometimes ivokes this even when it's not defined in
        # toolmanifest…
        sys.exit(1)
    else:
        run(args.commands, wait=args.wait_before_run)


if __name__ == "__main__":
    main()
